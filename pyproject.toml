[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "mcp-common"
version = "0.2.0"
description = "ACB-native foundation library providing battle-tested patterns for MCP (Model Context Protocol) servers, with dependency injection, structured logging, and lifecycle management"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Les Leslie", email = "les@wedgwoodwebworks.com" },
]
keywords = [
    "mcp",
    "model-context-protocol",
    "fastmcp",
    "utilities",
    "http-client",
    "rate-limiting",
    "configuration",
    "security",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Typing :: Typed",
]
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.7.0",
    "fastmcp>=0.2.0",
    "acb",
]

[project.license]
text = "BSD-3-Clause"

[project.optional-dependencies]
redis = [
    "redis[hiredis]>=5.0.0",
]
metrics = [
    "prometheus-client>=0.21.0",
]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "hypothesis>=6.122.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
    "safety>=3.2.0",
    "respx>=0.21.0",
    "crackerjack",
    "session-mgmt-mcp",
]
all = [
    "mcp-common[redis,metrics,dev]",
]

[project.urls]
Homepage = "https://github.com/lesleslie/mcp-common"
Documentation = "https://github.com/lesleslie/mcp-common#readme"
Repository = "https://github.com/lesleslie/mcp-common"
Issues = "https://github.com/lesleslie/mcp-common/issues"

[tool.hatchling.build.targets.wheel]
packages = [
    "mcp_common",
]

[tool.ruff]
line-length = 100
target-version = "py313"
src = [
    "mcp_common",
    "tests",
]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "N",
    "UP",
    "ANN",
    "ASYNC",
    "S",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "FLY",
    "PERF",
    "RUF",
]
ignore = [
    "COM812",
    "ISC001",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",
    "ANN201",
    "PLR2004",
]

[tool.ruff.lint.isort]
known-first-party = [
    "mcp_common",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
overrides = [
    { module = "tests.*", disallow_untyped_defs = false, disallow_untyped_calls = false },
]

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=mcp_common",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance/load tests",
]

[tool.coverage.run]
source = [
    "mcp_common",
]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = [
    "tests",
    "venv",
    ".venv",
]
skips = [
    "B101",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "hypothesis>=6.122.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "respx>=0.21.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args}"
test-cov = "pytest --cov {args}"
lint = "ruff check {args:mcp_common tests}"
format = "ruff format {args:mcp_common tests}"
format-check = "ruff format --check {args:mcp_common tests}"
type-check = "mypy {args:mcp_common tests}"
security = "bandit -r mcp_common"
all = [
    "format",
    "lint",
    "type-check",
    "test-cov",
    "security",
]

[tool.uv.sources.acb]
path = "../acb"
editable = true

[dependency-groups]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "hypothesis>=6.122.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
    "safety>=3.2.0",
    "respx>=0.21.0",
    "crackerjack",
    "session-mgmt-mcp",
]
